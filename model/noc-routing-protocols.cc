/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2015 João Loureiro
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: João Loureiro <joflo@isep.ipp.pt>
 */

#include "noc-routing-protocols.h"


namespace ns3 {
   //Using XY routing
    uint8_t NOCRoutingProtocols::RouteTo(uint8_t routing_alg, int32_t x_source, int32_t y_source, int32_t x_dest, int32_t y_dest) { //X-Y routing, with X first
        
        uint8_t dir = 0;

        switch (routing_alg){       
            case ROUTING_COLUMN_FIRST:
                if      (y_dest < 0)    dir = NOCRouter::DIRECTION_MASK_S;
                else if (y_dest > 0)    dir = NOCRouter::DIRECTION_MASK_N;

                else if (x_dest > 0)    dir = NOCRouter::DIRECTION_MASK_E;
                else if (x_dest < 0)    dir = NOCRouter::DIRECTION_MASK_W;

                else if (0 == x_dest && 0 == y_dest) dir = NOCRouter::DIRECTION_MASK_L;
                break;
            
            case ROUTING_ROW_FIRST:
                if      (x_dest > 0)    dir = NOCRouter::DIRECTION_MASK_E;
                else if (x_dest < 0)    dir = NOCRouter::DIRECTION_MASK_W;
                
                else if (y_dest > 0)    dir = NOCRouter::DIRECTION_MASK_S;
                else if (y_dest < 0)    dir = NOCRouter::DIRECTION_MASK_N;

                else if (0 == x_dest && 0 == y_dest) dir = NOCRouter::DIRECTION_MASK_L;
                break;                
            case ROUTING_CLOCKWISE:
//                break;
//                
//            case ROUTING_BROADCAST:
//                
                //Check in which quadrant the packet is in:
                
                /*              |
                 *       B      |     A
                 *              |
                 * -------------|-------------
                 *              |
                 *       C      |     D
                 *              |
                 */
                
                dir = NOCRouter::DIRECTION_MASK_L; //It sends the packet inside anyway, since it
                                         //was received, but not sent to the app yet
                
                //A: [+x +y[
                if (x_source >= 0 && y_source > 0){
                   dir |= NOCRouter::DIRECTION_MASK_E; //send it up, dir +y
                   if (x_source == 0) //if on the axis, send it right too
                       dir |= NOCRouter::DIRECTION_MASK_N;
                }
                //B: ]-x +y]
                else if (x_source < 0 && y_source >= 0){
                   dir |= NOCRouter::DIRECTION_MASK_N;
                   if (y_source == 0) 
                       dir |= NOCRouter::DIRECTION_MASK_W;
                }
                //C: [-x -y[
                else if (x_source <= 0 && y_source < 0){
                   dir |= NOCRouter::DIRECTION_MASK_W;
                   if (x_source == 0) 
                       dir |= NOCRouter::DIRECTION_MASK_S;
                }
                //D: ]+x -y]
                else if (x_source > 0 && y_source <= 0){
                   dir |= NOCRouter::DIRECTION_MASK_S;
                   if (y_source == 0) 
                       dir |= NOCRouter::DIRECTION_MASK_E;
                }
                else if (x_source == 0 && y_source == 0) //generated by myself.
                                                         //send it to all neighbors
                    dir = NOCRouter::DIRECTION_MASK_ALL_EXCEPT_LOCAL;
                
                
        }
        return dir;
    }
    
    uint8_t
    NOCRoutingProtocols::MulticastClockwise(int32_t x_source, int32_t y_source, uint16_t n_hops) {
 //Check in which quadrant the packet is in:

        /*              |
         *       B      |     A
         *              |
         * -------------|-------------
         *              |
         *       C      |     D
         *              |
         */

        uint8_t dir = NOCRouter::DIRECTION_MASK_L; //It sends the packet inside anyway, since it
                                 //was received, but not sent to the app yet

        //First of all, check if have not exceeded the radius defined by n_hops

        if (abs(x_source) + abs(y_source) < n_hops) {

            //A: [+x +y[
            if (x_source >= 0 && y_source > 0){
               dir |= NOCRouter::DIRECTION_MASK_E; //send it up, dir +y
               if (x_source == 0) //if on the axis, send it right too
                   dir |= NOCRouter::DIRECTION_MASK_N;
            }
            //B: ]-x +y]
            else if (x_source < 0 && y_source >= 0){
               dir |= NOCRouter::DIRECTION_MASK_N;
               if (y_source == 0) 
                   dir |= NOCRouter::DIRECTION_MASK_W;
            }
            //C: [-x -y[
            else if (x_source <= 0 && y_source < 0){
               dir |= NOCRouter::DIRECTION_MASK_W;
               if (x_source == 0) 
                   dir |= NOCRouter::DIRECTION_MASK_S;
            }
            //D: ]+x -y]
            else if (x_source > 0 && y_source <= 0){
               dir |= NOCRouter::DIRECTION_MASK_S;
               if (y_source == 0) 
                   dir |= NOCRouter::DIRECTION_MASK_E;
            }
            else if (x_source == 0 && y_source == 0) //generated by myself.
                                                     //send it to all neighbors
                dir = NOCRouter::DIRECTION_MASK_ALL_EXCEPT_LOCAL;

        }
        
        return dir;
    }
    
    
    
}